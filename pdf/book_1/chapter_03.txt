第3章 Node.js 基础知识

1) node.js 控制台;
2) node.js 全局作用域;
3) node.js 事件处理机制和事件环机制;
4) node.js 调试;

3.1 node.js 控制台
使用 console 对象代表控制台.
在 node.js 中，通过 console 对象的各种方法,
向控制台进行标准输出流和标准错误输出流的输出.

3.1.1 console.log
- 标准输出流的输出
- 在控制台中显示一行字符串

默认情况下:
- 标准输出流将被输出到控制台中,
- 也可以将它重定向输出到文件中

node app.js 1>info.log
- 1 代表重定向标准输出流

可以通过参数指定输出字符串的格式
console.log('%s', 'foo', 'bar');    // foo bar
console.log('%s', 'foo', {bar: 'bar test'}); // foo { bar: 'bar test'}
console.log('%d', 10, 10.5);    // 10 10.5
console.log('%d', 'string');    // NAN
console.log('%%', 'hop');   // % hop

- 同 console.info

3.1.2 console.error
- 标准错误输出流的输出

node app.js 2>info.log
- 2 代表重定向标准错误输出流

- 任何运行程序时引发的错误信息, 均可被重定向到某个文件中
- 通过参数指定输出字符串的格式

- 同 console.warn


3.1.3 console.dir
- 查看一个对象的内容, 并将对象的信息输出到控制台中

3.1.4 console.time console.timeEnd
- 统计一段代码的执行时间
- 输出毫秒数
- 参数值可以是任何字符串，但必须相同

3.1.5 console.trace
- 将当前位置处的栈信息作为标准错误信息进行输出

3.1.6 console.assert
- 用于对一个表达式的执行结果进行评估
- 该表达式的执行结果为 false, 则输出一个消息字符串, 并抛出 AssertionError 异常.



3.2 node.js 全局作用域及全局函数

3.2.1 nodejs 全局作用域
- global 对象, 代表 nodejs 中的全局命名空间.
- 任何全局变量、函数或对象都是该对象的一个属性值.

REPL 环境

3.2.2 setTimeout 函数与 clearTimeout 函数
- var timer = setTimeout(cb, ms, [arg], [...])
- 返回定时器对象

- clearTimeout(timer)

3.2.3 setInterval 函数与 clearInterval
- var timer = setInterval(cb, ms, [arg], [...])
- clearInterval(timer)

3.2.4 定时器对象的 unref 方法与 ref 方法
- timer.unref();
- 取消指定回调函数的调用

Note: 过多使用定时器对象的 unref 方法将对应用程序的性能产生一些负面影响

- timer.ref();
- 当使用定时器对象的 unref 方法取消回调函数的调用后,
仍可使用该定时器对象的 ref 方法恢复回调函数的调用.

3.2.5 与模块相关的全局函数及对象
- 使用 require 函数加载模块
- 在 nodejs 中，所有脚本文件都是一个模块文件

- require.main 变量，用于检测一个模块是否为应用程序中的主模块

if (module === require.main) {
    // this is the main module of application
}

- 在首次加载模块文件时，将运行模块文件中的每一行代码.
- 模块在首次加载后，将缓存在内存缓存区中。

Note: 对于相同模块的多次引用, 得到的都是同一个模块对象,
对于相同模块的多次引用, 不会引起模块内代码的多次执行,
如果想在每次引用模块时，都执行一次模块内部的某些代码，
可以将这些代码指定在某个方法内，然后导出该方法

- 使用 require.resolve 函数查询完整模块名
查询某个模块文件的带有完整绝对路径的文件名
查询时并不会加载该模块

- require.cache 对象
该对象代表缓存了所有已被加载模块的缓存区
键名/键值
键名：每个模块的完整文件名
键值：各模块对象

使用 delete 关键字删除缓存区中缓存的某个模块对象后，
下次加载该模块时将重新运行该模块中的代码


3.3 __filename 与 __dirname
- __filename: 获取当前模块文件的带有完整绝对路径的文件名
- __dirname:  获取当前模块文件所在目录的完整绝对路径


3.4 事件处理机制及事件环机制

3.4.1 EventEmitter 类
- addListener(event, listener); // 对指定事件绑定事件处理函数
- on(event, listener);          // 对指定事件绑定事件处理函数 (addListener 方法别名)
- once(event, listener);        // 对指定事件指定只执行一次的事件处理函数
- removeListener(event, listener);  // 对指定事件解除事件处理函数
- removeAllListeners([event]);       // 对指定事件解除所有事件处理函数
- setMaxListener(n);            // 指定事件处理函数的最大数量
- listeners(event);             // 获取指定事件的所有事件处理函数
- emit(event, [arg1], [arg2], [...]);  // 手工触发指定事件

3.4.2 EventEmitter 类的各个方法
- 可以通过多个 on 方法的执行，来对同一个事件绑定多个事件处理函数
- 一般情况下，同一个事件最多可以绑定 10 事件处理函数
- 可以通过 setMaxListeners 方法修改数量
- emitter.setMaxListeners(n);
- emitter.listeners(event);

3.4.3 获取指定事件的事件处理函数的数量
- EventEmitter.listenerCount(emitter, event);
获取某个对象的指定事件的事件处理函数的数量

3.4.4 EventEmitter 类自身所拥有的事件
- newListener
- removeListener

3.4.5 事件环机制
- 单线程
- 一个时刻，只能执行一个回调函数
- V8 JavaScript 语言


3.5 在 Node.js 中使用调试器

3.5.1 在命令行窗口中使用调试器
- node debug <filename>

继续剩余脚本代码的执行
- cont or c

继续执行下一句代码
- next or n

程序将暂停在函数内第一行可执行代码之前
- step or s

程序将立即执行完函数内剩余所有代码
- out or o


3.5.2 观察变量值或表达式的执行结果
- watch 命令来观察某个变量的值或某个表达式的执行结果
- watchers
- unwatch

3.5.3 设置与取消断点
- setBreakpoint(filename, line)
- sb(filename, line)
- clearBreakpoint(filename, line)
- cb(filename, line)


3.5.4 调试器中可以使用的其他使用命令
- backtrace
- bt
- list(n)
- repl
- restart
- kill
- run
- scripts
- version

3.5.5 使用 node-inspector 调试工具
npm i -g node-inspector

两个命令行窗口:
- node --debug-brk[=port]app.js
- node-inspector

3.6 小结