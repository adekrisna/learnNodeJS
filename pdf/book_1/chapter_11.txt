第 11 章 加密与压缩

- crypto 数据加密解密
- zlib   数据压缩解压缩

11.1 加密解密

11.1.1 crypto
在 Node.js 中，使用 OpenSSL 类库作为其内部实现加密与解密处理的基础手段。

- 在 crypto 模块中，为每一种加密算法定义了一个类。

crypto.getCiphers()
* 返回一个数组
* Node.js 中能够使用的所有加密算法

crypto.getHashes()
* 返回一个数组
* Node.js 中能够使用的所有散列算法


11.1.2 散列算法（哈希算法）

- 创建一个 hash 对象
var hash = crypto.createHash('sha')

* 返回一个被创建的 hash 对象

- 创建一个摘要
hash.update(data, [input_encoding])
* data 摘要内容（必填）
* input_encoding 摘要编码（可选）
* 可以在摘要被输出前，使用多次 update 方法添加摘要

- 输出摘要
hash.digest([encoding])
* 不能再向 hash 对象中追加摘要内容
* hash 对象不能再被使用

11.1.3 HMAC 算法
HMAC 算法将散列算法与一个秘钥结合在一起，
以阻止对签名完整性的破坏

- 创建一个 hmac 对象
* crypto.createHmac(algorithm, key)
* algorithm 使用的散列算法
* key 字符串，指定一个 PEM格式的秘钥

在 OpenSSL 工具中，创建一个秘钥：
opensslgenrsa -out key.pem 1024

- 创建一个摘要
* hmac.update(data)

- 输出摘要
* hmac.digest([encoding])

11.1.4 公钥加密
- Clipher   加密数据
- Decipher  解密数据
- Sign      生成签名
- Verify    验证签名

11.2 压缩与解压缩处理